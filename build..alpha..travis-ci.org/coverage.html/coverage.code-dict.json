{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_media_capture */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/lib.npmtest_cordova_plugin_media_capture.js":"/* istanbul instrument in package npmtest_cordova_plugin_media_capture */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_media_capture = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_media_capture = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-media-capture && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_media_capture */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_media_capture\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_media_capture.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_media_capture.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_media_capture.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_media_capture.__dirname + '/lib.npmtest_cordova_plugin_media_capture.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/CaptureAudioOptions.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Encapsulates all audio capture operation configuration options.\n */\nvar CaptureAudioOptions = function(){\n    // Upper limit of sound clips user can record. Value must be equal or greater than 1.\n    this.limit = 1;\n    // Maximum duration of a single sound clip in seconds.\n    this.duration = 0;\n};\n\nmodule.exports = CaptureAudioOptions;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/CaptureError.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * The CaptureError interface encapsulates all errors in the Capture API.\n */\nvar CaptureError = function(c) {\n   this.code = c || null;\n};\n\n// Camera or microphone failed to capture image or sound.\nCaptureError.CAPTURE_INTERNAL_ERR = 0;\n// Camera application or audio capture application is currently serving other capture request.\nCaptureError.CAPTURE_APPLICATION_BUSY = 1;\n// Invalid use of the API (e.g. limit parameter has value less than one).\nCaptureError.CAPTURE_INVALID_ARGUMENT = 2;\n// User exited camera application or audio capture application before capturing anything.\nCaptureError.CAPTURE_NO_MEDIA_FILES = 3;\n// User denied permissions required to perform the capture request.\nCaptureError.CAPTURE_PERMISSION_DENIED = 4;\n// The requested capture operation is not supported.\nCaptureError.CAPTURE_NOT_SUPPORTED = 20;\n\nmodule.exports = CaptureError;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/CaptureImageOptions.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Encapsulates all image capture operation configuration options.\n */\nvar CaptureImageOptions = function(){\n    // Upper limit of images user can take. Value must be equal or greater than 1.\n    this.limit = 1;\n};\n\nmodule.exports = CaptureImageOptions;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/capture.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec'),\n    helpers = require('./helpers');\n\n/**\n * Launches a capture of different types.\n *\n * @param (DOMString} type\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureVideoOptions} options\n */\nfunction _capture(type, successCallback, errorCallback, options) {\n    var win = function(pluginResult) {\n        successCallback(helpers.wrapMediaFiles(pluginResult));\n    };\n    exec(win, errorCallback, \"Capture\", type, [options]);\n}\n\n\n/**\n * The Capture interface exposes an interface to the camera and microphone of the hosting device.\n */\nfunction Capture() {\n    this.supportedAudioModes = [];\n    this.supportedImageModes = [];\n    this.supportedVideoModes = [];\n}\n\n/**\n * Launch audio recorder application for recording audio clip(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureAudioOptions} options\n */\nCapture.prototype.captureAudio = function(successCallback, errorCallback, options){\n    _capture(\"captureAudio\", successCallback, errorCallback, options);\n};\n\n/**\n * Launch camera application for taking image(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureImageOptions} options\n */\nCapture.prototype.captureImage = function(successCallback, errorCallback, options){\n    _capture(\"captureImage\", successCallback, errorCallback, options);\n};\n\n/**\n * Launch device camera application for recording video(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureVideoOptions} options\n */\nCapture.prototype.captureVideo = function(successCallback, errorCallback, options){\n    _capture(\"captureVideo\", successCallback, errorCallback, options);\n};\n\n\nmodule.exports = new Capture();\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/CaptureVideoOptions.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Encapsulates all video capture operation configuration options.\n */\nvar CaptureVideoOptions = function(){\n    // Upper limit of videos user can record. Value must be equal or greater than 1.\n    this.limit = 1;\n    // Maximum duration of a single video clip in seconds.\n    this.duration = 0;\n    // Video quality parameter, 0 means low quality, suitable for MMS messages, and value 1 means high quality.\n    this.quality = 1;\n};\n\nmodule.exports = CaptureVideoOptions;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/ConfigurationData.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Encapsulates a set of parameters that the capture device supports.\n */\nfunction ConfigurationData() {\n    // The ASCII-encoded string in lower case representing the media type.\n    this.type = null;\n    // The height attribute represents height of the image or video in pixels.\n    // In the case of a sound clip this attribute has value 0.\n    this.height = 0;\n    // The width attribute represents width of the image or video in pixels.\n    // In the case of a sound clip this attribute has value 0\n    this.width = 0;\n}\n\nmodule.exports = ConfigurationData;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/helpers.js":"/*\r\n *\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n *\r\n*/\r\n\r\nvar MediaFile = require('./MediaFile');\r\n\r\nfunction wrapMediaFiles(pluginResult) {\r\n    var mediaFiles = [];\r\n    var i;\r\n    for (i = 0; i < pluginResult.length; i++) {\r\n        var mediaFile = new MediaFile();\r\n        mediaFile.name = pluginResult[i].name;\r\n\r\n        // Backwards compatibility\r\n        mediaFile.localURL = pluginResult[i].localURL || pluginResult[i].fullPath;\r\n        mediaFile.fullPath = pluginResult[i].fullPath;\r\n        mediaFile.type = pluginResult[i].type;\r\n        mediaFile.lastModifiedDate = pluginResult[i].lastModifiedDate;\r\n        mediaFile.size = pluginResult[i].size;\r\n        mediaFiles.push(mediaFile);\r\n    }\r\n    return mediaFiles;\r\n}\r\n\r\nmodule.exports = {\r\n    wrapMediaFiles: wrapMediaFiles\r\n};","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/MediaFile.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar utils = require('cordova/utils'),\n    exec = require('cordova/exec'),\n    File = require('cordova-plugin-file.File'),\n    CaptureError = require('./CaptureError');\n/**\n * Represents a single file.\n *\n * name {DOMString} name of the file, without path information\n * fullPath {DOMString} the full path of the file, including the name\n * type {DOMString} mime type\n * lastModifiedDate {Date} last modified date\n * size {Number} size of the file in bytes\n */\nvar MediaFile = function(name, localURL, type, lastModifiedDate, size){\n    MediaFile.__super__.constructor.apply(this, arguments);\n};\n\nutils.extend(MediaFile, File);\n\n/**\n * Request capture format data for a specific file and type\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n */\nMediaFile.prototype.getFormatData = function(successCallback, errorCallback) {\n    if (typeof this.fullPath === \"undefined\" || this.fullPath === null) {\n        errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n    } else {\n        exec(successCallback, errorCallback, \"Capture\", \"getFormatData\", [this.fullPath, this.type]);\n    }\n};\n\nmodule.exports = MediaFile;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/MediaFileData.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * MediaFileData encapsulates format information of a media file.\n *\n * @param {DOMString} codecs\n * @param {long} bitrate\n * @param {long} height\n * @param {long} width\n * @param {float} duration\n */\nvar MediaFileData = function(codecs, bitrate, height, width, duration){\n    this.codecs = codecs || null;\n    this.bitrate = bitrate || 0;\n    this.height = height || 0;\n    this.width = width || 0;\n    this.duration = duration || 0;\n};\n\nmodule.exports = MediaFileData;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/src/blackberry10/index.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global PluginResult */\n\n//cordova-js/lib/common/plugin/CaptureError.js\nvar INTERNAL_ERROR_CODE = 0,\n    APPLICATION_BUSY_ERROR_CODE = 1,\n    INVALID_ARGUMENT_ERROR_CODE = 2,\n    NO_MEDIA_FILES_ERROR_CODE = 3;\n\nfunction capture(action, options, result, webview) {\n    var limit = options.limit || 1,\n        fail = function (error) {\n            result.callbackError({code: INTERNAL_ERROR_CODE});\n        },\n        onCaptured = function (path) {\n            var sb = webview.setFileSystemSandbox;\n            webview.setFileSystemSandbox = false;\n            window.webkitRequestFileSystem(window.PERSISTENT, 1024, function (fs) {\n                fs.root.getFile(path, {}, function (fe) {\n                    fe.file(function (file) {\n                        file.fullPath = fe.fullPath;\n                        webview.setFileSystemSandbox = sb;\n                        result.callbackOk([file]);\n                    }, fail);\n                }, fail);\n            }, fail);\n        },\n        onAudioCaptured = function (response) {\n            window.qnx.webplatform.getApplication().invocation.removeEventListener(\"childCardClosed\", onAudioCaptured);\n            if (response.data && response.data !== \"\") {\n                onCaptured(response.data);\n            } else {\n                result.callbackError({code: NO_MEDIA_FILES_ERROR_CODE });\n            }\n        },\n        onCancelled = function () {\n            result.callbackError({code: NO_MEDIA_FILES_ERROR_CODE });\n        },\n        onInvoked = function (error) {\n            if (error) {\n                result.callbackError({code: APPLICATION_BUSY_ERROR_CODE});\n            }\n        };\n\n    if (limit < 0) {\n        result.error({code: INVALID_ARGUMENT_ERROR_CODE});\n    } else if (action === \"audio\") {\n        window.qnx.webplatform.getApplication().invocation.invoke(\n            { \n                target: \"sys.apps.audiorecorder\",\n                action: \"bb.action.CAPTURE\"\n            },\n            function (error) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    window.qnx.webplatform.getApplication().invocation.addEventListener(\"childCardClosed\", onAudioCaptured);\n                }\n            });\n        result.noResult(true);\n    } else {\n        window.qnx.webplatform.getApplication().cards.camera.open(action, onCaptured, onCancelled, onInvoked);\n        result.noResult(true);\n    }\n}\n\nmodule.exports = {\n    getSupportedAudioModes: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n        result.ok([]);\n    },\n    getSupportedImageModes: function (win, fail, args, env) {\n        var result = new PluginResult(args, env);\n        result.ok([]);\n    },\n    getSupportedVideoModes: function (win, fail, args, env) {\n        var result = new PluginResult(args, env);\n        result.ok([]);\n    },\n    captureImage: function (win, fail, args, env) {\n        var result = new PluginResult(args, env),\n            options = args[0] === \"undefined\" ? {} : JSON.parse(decodeURIComponent(args[0]));\n\n        capture(\"photo\", options,  result, env.webview);\n    },\n    captureVideo: function (win, fail, args, env) {\n        var result = new PluginResult(args, env),\n            options = args[0] === \"undefined\" ? {} : JSON.parse(decodeURIComponent(args[0]));\n\n        capture(\"video\", options, result, env.webview);\n    },\n    captureAudio: function (win, fail, args, env) {\n        var result = new PluginResult(args, env);\n        capture(\"audio\", {}, result, env.webview);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/src/browser/CaptureProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/*global require, module*/\n\nvar MediaFile = require('cordova-plugin-media-capture.MediaFile');\nvar MediaFileData = require('cordova-plugin-media-capture.MediaFileData');\nvar CaptureError = require('cordova-plugin-media-capture.CaptureError');\n\n/**\n * Helper function that converts data URI to Blob\n * @param  {String} dataURI Data URI to convert\n * @return {Blob}           Blob, covnerted from DataURI String\n */\nfunction dataURItoBlob(dataURI) {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs\n    var byteString = atob(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to an ArrayBuffer\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    // write the ArrayBuffer to a blob, and you're done\n    return new Blob([ab], { type: mimeString });\n}\n\n/**\n * Creates basic camera UI with preview 'video' element and 'Cancel' button\n * Capture starts, when you clicking on preview.\n */\nfunction CameraUI() {\n\n    // Root element for preview \n    var container = document.createElement('div');\n    container.style.cssText = \"left: 0px; top: 0px; width: 100%; height: 100%; position: fixed; z-index:9999;\" +\n                                   \"padding: 40px; background-color: rgba(0,0,0,0.75);\" + \n                                   \"text-align:center; visibility: hidden\";\n\n    // Set up root element contetnts\n    container.innerHTML =\n        '<div id=\"captureHint\" style=\"height:100%; position:relative; display:inline-flex; align-content:flex-start;\">' +\n        '<h2 style=\"position: absolute; width: 100%; background-color: rgba(255,255,255,0.25); margin: 0\">' +\n            'Click on preview to capture image. Click outside of preview to cancel.</h1>' + \n        '<video id=\"capturePreview\" style=\"height: 100%\"></video>' +\n        '</div>';\n\n    // Add container element to DOM but do not display it since visibility == hidden\n    document.body.appendChild(container);\n\n    // Create fullscreen preview\n    var preview = document.getElementById('capturePreview');\n    preview.autoplay = true;\n    // We'll show preview only when video element content\n    // is fully loaded to avoid glitches\n    preview.onplay = function () {\n        container.style.visibility = 'visible';\n    };\n\n    this.container = container;\n    this.preview = preview;\n}\n\n/**\n * Displays capture preview\n * @param  {Number} count       Number of images to take\n * @param  {Function} successCB Success callback, that accepts data URL of captured image\n * @param  {Function} errorCB   Error callback\n */\nCameraUI.prototype.startPreview = function(count, successCB, errorCB) {\n    var that = this;\n\n    this.preview.onclick = function (e) {\n        // proceed with capture here\n        // We don't need to propagate click event to parent elements.\n        // Otherwise click on vieo element will trigger click event handler\n        // for preview root element and cause preview cancellation\n        e.stopPropagation();\n        // Create canvas element, put video frame on it\n        // and save its contant as Data URL\n        var canvas = document.createElement('canvas');\n        canvas.width = this.videoWidth;\n        canvas.height = this.videoHeight;\n        canvas.getContext('2d').drawImage(that.preview, 0, 0);\n        successCB(canvas.toDataURL('image/jpeg'));\n    };\n\n    this.container.onclick = function () {\n        // Cancel capture here\n        errorCB(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n    };\n\n    navigator.getUserMedia({video: true}, function (previewStream) {\n        // Save video stream to be able to stop it later \n        that._previewStream = previewStream;\n        that.preview.src = URL.createObjectURL(previewStream);\n        // We don't need to set visibility = true for preview element\n        // since this will be done automatically in onplay event handler\n    }, function (/*err*/) {\n        errorCB(new CaptureError(CaptureError.CAPTURE_INTERNAL_ERR));\n    });\n};\n\n/**\n * Destroys camera preview, removes all elements created\n */\nCameraUI.prototype.destroyPreview = function () {\n    this.preview.pause();\n    this.preview.src = null;\n    this._previewStream.stop();\n    this._previewStream = null;\n    if (this.container) {\n        document.body.removeChild(this.container);\n    }\n};\n\n\nmodule.exports = {\n    captureAudio:function(successCallback, errorCallback) {\n        if (errorCallback) {\n            errorCallback(new CaptureError(CaptureError.CAPTURE_NOT_SUPPORTED));\n        }\n    },\n\n    captureVideo:function (successCallback, errorCallback) {\n        if (errorCallback) {\n            errorCallback(new CaptureError(CaptureError.CAPTURE_NOT_SUPPORTED));\n        }\n    },\n\n    captureImage:function (successCallback, errorCallback, args) {\n\n        var fail = function (code) {\n            if (errorCallback) {\n                errorCallback(new CaptureError(code || CaptureError.CAPTURE_INTERNAL_ERR));\n            }\n        };\n\n        var options = args[0];\n\n        var limit = options.limit || 1;\n        if (typeof limit !== 'number' || limit < 1) {\n            fail(CaptureError.CAPTURE_INVALID_ARGUMENT);\n            return;\n        }\n\n        // Counter for already taken images\n        var imagesTaken = 0;\n\n        navigator.getUserMedia = navigator.getUserMedia ||\n                         navigator.webkitGetUserMedia ||\n                         navigator.mozGetUserMedia ||\n                         navigator.msGetUserMedia;\n\n        if (!navigator.getUserMedia) {\n            fail(CaptureError.CAPTURE_NOT_SUPPORTED);\n            return;\n        }\n\n        var ui = new CameraUI();\n        ui.startPreview(limit, function (data) {\n            // Check if we're done with capture. If so, then destroy UI\n            if (++imagesTaken >= limit) {\n                ui.destroyPreview();\n            }\n\n            // Array of resultant MediaFiles\n            var mediaFiles = [];\n\n            // save data to file here\n            window.requestFileSystem(window.TEMPORARY, data.length * limit, function (fileSystem) {\n                // If we need to capture multiple files, then append counter to filename\n                var fileName = limit <= 1 ? 'image.jpg' : 'image' + imagesTaken + '.jpg';\n                fileSystem.root.getFile(fileName, {create: true}, function (file) {\n                    file.createWriter(function (writer) {\n                        writer.onwriteend = function () {\n                            file.getMetadata(function (meta) {\n                                mediaFiles.push(new MediaFile(file.name, file.toURL(), 'image/jpeg', meta.modificationTime, meta.size));\n                                // Check if we're done with capture. If so, then call a successCallback\n                                if (imagesTaken >= limit) {\n                                    successCallback(mediaFiles);\n                                }\n                            }, fail);\n                        };\n                        writer.onerror = fail;\n                        // Since success callback for start preview returns\n                        // a base64 encoded string, we need to convert it to blob first\n                        writer.write(dataURItoBlob(data));\n                    });\n                }, fail);\n            }, fail);\n        }, function (err) {\n            ui.destroyPreview();\n            fail(err.code);\n        });\n    },\n\n    getFormatData: function (successCallback, errorCallback, args) {\n\n        var img = document.createElement('img');\n        img.src = args[0];\n        img.onload = function () {\n            if (successCallback) {\n                successCallback(new MediaFileData(null, 0, img.height, img.width, 0));\n            }\n        };\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Capture\",module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/src/windows/CaptureProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global Windows:true */\n\nvar MediaFile = require('cordova-plugin-media-capture.MediaFile');\nvar CaptureError = require('cordova-plugin-media-capture.CaptureError');\nvar CaptureAudioOptions = require('cordova-plugin-media-capture.CaptureAudioOptions');\nvar CaptureVideoOptions = require('cordova-plugin-media-capture.CaptureVideoOptions');\nvar MediaFileData = require('cordova-plugin-media-capture.MediaFileData');\n\n/*\n * Class that combines all logic for capturing picture and video on WP8.1\n */\nfunction MediaCaptureProxy() {\n\n    var previewContainer,\n        capturePreview = null,\n        captureCancelButton = null,\n        captureSettings = null,\n        captureStarted = false,\n        capturedPictureFile,\n        capturedVideoFile,\n        capture = null;\n\n    var CaptureNS = Windows.Media.Capture;\n\n    /**\n     * Helper function that toggles visibility of DOM elements with provided ids\n     * @param {String} variable number of elements' ids which visibility needs to be toggled \n     */\n    function toggleElements() {\n        // convert arguments to array\n        var args = Array.prototype.slice.call(arguments);\n        args.forEach(function(buttonId) {\n            var buttonEl = document.getElementById(buttonId);\n            if (buttonEl) {\n                var curDisplayStyle = buttonEl.style.display;\n                buttonEl.style.display = curDisplayStyle === 'none' ? 'block' : 'none';\n            }\n        });\n    }\n\n    /**\n     * Creates basic camera UI with preview 'video' element and 'Cancel' button\n     * Capture starts, when you clicking on preview.\n     */\n    function createCameraUI() {\n\n        var buttonStyle = \"margin: 7px; border: 2.5px solid white; width: 45%; height: 35px; color: white; background-color: black;\";\n\n        previewContainer = document.createElement('div');\n        previewContainer.style.cssText = \"background-position: 50% 50%; background-repeat: no-repeat; background-size: contain; background-color: black; left: 0px; top: 0px; width: 100%; height: 100%; position: fixed; z-index: 9999\";\n        previewContainer.innerHTML =\n            '<video id=\"capturePreview\" style=\"width: 100%; height: 100%\"></video>' +\n            '<div id=\"previewButtons\" style=\"width: 100%; bottom: 0px; display: flex; position: absolute; justify-content: space-around; background-color: black;\">' +\n                '<button id=\"takePicture\" style=\"' + buttonStyle + '\">Capture</button>' +\n                '<button id=\"cancelCapture\" style=\"' + buttonStyle + '\">Cancel</button>' +\n                '<button id=\"selectPicture\" style=\"display: none; ' + buttonStyle + '\">Accept</button>' +\n                '<button id=\"retakePicture\" style=\"display: none; ' + buttonStyle + '\">Retake</button>' +\n            '</div>';\n\n        document.body.appendChild(previewContainer);\n\n        // Create fullscreen preview\n        capturePreview = document.getElementById('capturePreview');\n\n        // Create cancel button\n        captureCancelButton = document.getElementById('cancelCapture');\n\n        capture = new CaptureNS.MediaCapture();\n\n        captureSettings = new CaptureNS.MediaCaptureInitializationSettings();\n        captureSettings.streamingCaptureMode = CaptureNS.StreamingCaptureMode.audioAndVideo;\n    }\n\n    /**\n     * Starts camera preview and binds provided callbacks to controls\n     * @param  {function} takeCallback   Callback for Take button\n     * @param  {function} errorCallback  Callback for Cancel button + default error callback\n     * @param  {function} selectCallback Callback for Select button\n     * @param  {function} retakeCallback Callback for Retake button\n     */\n    function startCameraPreview(takeCallback, errorCallback, selectCallback, retakeCallback) {\n        // try to select appropriate device for capture\n        // rear camera is preferred option\n        var expectedPanel = Windows.Devices.Enumeration.Panel.back;\n        Windows.Devices.Enumeration.DeviceInformation.findAllAsync(Windows.Devices.Enumeration.DeviceClass.videoCapture).done(function (devices) {\n            if (devices.length > 0) {\n                devices.forEach(function (currDev) {\n                    if (currDev.enclosureLocation && currDev.enclosureLocation.panel && currDev.enclosureLocation.panel == expectedPanel) {\n                        captureSettings.videoDeviceId = currDev.id;\n                    }\n                });\n\n                capture.initializeAsync(captureSettings).done(function () {\n                    // This is necessary since WP8.1 MediaCapture outputs video stream rotated 90 degrees CCW\n                    // TODO: This can be not consistent across devices, need additional testing on various devices\n                    // msdn.microsoft.com/en-us/library/windows/apps/hh452807.aspx\n                    capture.setPreviewRotation(Windows.Media.Capture.VideoRotation.clockwise90Degrees);\n                    capturePreview.msZoom = true;\n\n                    capturePreview.src = URL.createObjectURL(capture);\n                    capturePreview.play();\n\n                    previewContainer.style.display = 'block';\n\n                    // Bind events to controls\n                    capturePreview.onclick = takeCallback;\n                    document.getElementById('takePicture').onclick = takeCallback;\n                    document.getElementById('cancelCapture').onclick = function () {\n                        errorCallback(CaptureError.CAPTURE_NO_MEDIA_FILES);\n                    };\n                    document.getElementById('selectPicture').onclick = selectCallback;\n                    document.getElementById('retakePicture').onclick = retakeCallback;\n                }, function (err) {\n                    destroyCameraPreview();\n                    errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                });\n            } else {\n                // no appropriate devices found\n                destroyCameraPreview();\n                errorCallback(CaptureError.CAPTURE_INTERNAL_ERR);\n            }\n        });\n    }\n\n    /**\n     * Destroys camera preview, removes all elements created\n     */\n    function destroyCameraPreview() {\n        capturePreview.pause();\n        capturePreview.src = null;\n        if (previewContainer) {\n            document.body.removeChild(previewContainer);\n        }\n        if (capture) {\n            capture.stopRecordAsync();\n            capture = null;\n        }\n    }\n\n    return {\n        /**\n         * Initiate video capture using MediaCapture class\n         * @param  {function} successCallback Called, when user clicked on preview, with captured file object\n         * @param  {function} errorCallback   Called on any error\n         */\n        captureVideo: function (successCallback, errorCallback) {\n            try {\n                createCameraUI();\n                startCameraPreview(function () {\n                    // This callback called twice: whem video capture started and when it ended\n                    // so we need to check capture status\n                    if (!captureStarted) {\n                        // remove cancel button and rename 'Take' button to 'Stop'\n                        toggleElements('cancelCapture');\n                        document.getElementById('takePicture').text = 'Stop';\n\n                        var encodingProperties = Windows.Media.MediaProperties.MediaEncodingProfile.createMp4(Windows.Media.MediaProperties.VideoEncodingQuality.auto),\n                            generateUniqueCollisionOption = Windows.Storage.CreationCollisionOption.generateUniqueName,\n                            localFolder = Windows.Storage.ApplicationData.current.localFolder;\n\n                        localFolder.createFileAsync(\"cameraCaptureVideo.mp4\", generateUniqueCollisionOption).done(function(capturedFile) {\n                            capture.startRecordToStorageFileAsync(encodingProperties, capturedFile).done(function() {\n                                capturedVideoFile = capturedFile;\n                                captureStarted = true;\n                            }, function(err) {\n                                destroyCameraPreview();\n                                errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                            });\n                        }, function(err) {\n                            destroyCameraPreview();\n                            errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                        });\n                    } else {\n                        capture.stopRecordAsync().done(function () {\n                            destroyCameraPreview();\n                            successCallback(capturedVideoFile);\n                        });\n                    }\n                }, errorCallback);\n            } catch (ex) {\n                destroyCameraPreview();\n                errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, ex);\n            }\n        },\n\n        /**\n         * Initiate image capture using MediaCapture class\n         * @param  {function} successCallback Called, when user clicked on preview, with captured file object\n         * @param  {function} errorCallback   Called on any error\n         */\n        capturePhoto: function (successCallback, errorCallback) {\n            try {\n                createCameraUI();\n                startCameraPreview(\n                    // Callback for Take button - captures intermediate image file.\n                    function () {\n                        var encodingProperties = Windows.Media.MediaProperties.ImageEncodingProperties.createJpeg(),\n                            overwriteCollisionOption = Windows.Storage.CreationCollisionOption.replaceExisting,\n                            tempFolder = Windows.Storage.ApplicationData.current.temporaryFolder;\n\n                        tempFolder.createFileAsync(\"cameraCaptureImage.jpg\", overwriteCollisionOption).done(function (capturedFile) {\n                            capture.capturePhotoToStorageFileAsync(encodingProperties, capturedFile).done(function () {\n                                // store intermediate result in object's global variable\n                                capturedPictureFile = capturedFile;\n                                // show pre-captured image and toggle visibility of all buttons\n                                previewContainer.style.backgroundImage = 'url(\"' + 'ms-appdata:///temp/' + capturedFile.name + '\")';\n                                toggleElements('capturePreview', 'takePicture', 'cancelCapture', 'selectPicture', 'retakePicture');\n                            }, function (err) {\n                                destroyCameraPreview();\n                                errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                            });\n                        }, function (err) {\n                            destroyCameraPreview();\n                            errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                        });\n                    },\n                    // error + cancel callback\n                    function (err) {\n                        destroyCameraPreview();\n                        errorCallback(err);\n                    },\n                    // Callback for Select button - copies intermediate file into persistent application's storage\n                    function () {\n                        var generateUniqueCollisionOption = Windows.Storage.CreationCollisionOption.generateUniqueName,\n                            localFolder = Windows.Storage.ApplicationData.current.localFolder;\n\n                        capturedPictureFile.copyAsync(localFolder, capturedPictureFile.name, generateUniqueCollisionOption).done(function (copiedFile) {\n                            destroyCameraPreview();\n                            successCallback(copiedFile);\n                        }, function(err) {\n                            destroyCameraPreview();\n                            errorCallback(err);\n                        });\n                    },\n                    // Callback for retake button - just toggles visibility of necessary elements\n                    function () {\n                        toggleElements('capturePreview', 'takePicture', 'cancelCapture', 'selectPicture', 'retakePicture');\n                    }\n                );\n            } catch (ex) {\n                destroyCameraPreview();\n                errorCallback(CaptureError.CAPTURE_INTERNAL_ERR, ex);\n            }\n        }\n    };\n}\n\nmodule.exports = {\n\n    captureAudio:function(successCallback, errorCallback, args) {\n        var options = args[0];\n\n        var audioOptions = new CaptureAudioOptions();\n        if (typeof(options.duration) == 'undefined') {\n            audioOptions.duration = 3600; // Arbitrary amount, need to change later\n        } else if (options.duration > 0) {\n            audioOptions.duration = options.duration;\n        } else {\n            errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n            return;\n        }\n\n        // Some shortcuts for long namespaces\n        var CaptureNS = Windows.Media.Capture,\n            MediaPropsNS = Windows.Media.MediaProperties,\n            localAppData = Windows.Storage.ApplicationData.current.localFolder,\n            generateUniqueName = Windows.Storage.NameCollisionOption.generateUniqueName;\n\n        var mediaCapture = new CaptureNS.MediaCapture(),\n            mediaCaptureSettings = new CaptureNS.MediaCaptureInitializationSettings(),\n            mp3EncodingProfile = new MediaPropsNS.MediaEncodingProfile.createMp3(MediaPropsNS.AudioEncodingQuality.auto),\n            m4aEncodingProfile = new MediaPropsNS.MediaEncodingProfile.createM4a(MediaPropsNS.AudioEncodingQuality.auto);\n\n        mediaCaptureSettings.streamingCaptureMode = CaptureNS.StreamingCaptureMode.audio;\n\n        var capturedFile,\n            stopRecordTimeout;\n\n        var stopRecord = function () {\n            mediaCapture.stopRecordAsync().then(function() {\n                capturedFile.getBasicPropertiesAsync().then(function (basicProperties) {\n                    var result = new MediaFile(capturedFile.name, 'ms-appdata:///local/' + capturedFile.name, capturedFile.contentType, basicProperties.dateModified, basicProperties.size);\n                    result.fullPath = capturedFile.path;\n                    successCallback([result]);\n                }, function() {\n                    errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                });\n            }, function() { errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES)); });\n        };\n\n        mediaCapture.initializeAsync(mediaCaptureSettings).done(function () {\n            localAppData.createFileAsync(\"captureAudio.mp3\", generateUniqueName).then(function (storageFile) {\n                capturedFile = storageFile;\n                mediaCapture.startRecordToStorageFileAsync(mp3EncodingProfile, capturedFile).then(function () {\n                    stopRecordTimeout = setTimeout(stopRecord, audioOptions.duration * 1000);\n                }, function (err) {\n                    // -1072868846 is the error code for \"No suitable transform was found to encode or decode the content.\"\n                    // so we try to use another (m4a) format\n                    if (err.number === -1072868846) {\n                        // first we clear existing timeout to prevent success callback to be called with invalid arguments\n                        // second we start same actions to try to record m4a audio\n                        clearTimeout(stopRecordTimeout);\n                        localAppData.createFileAsync(\"captureAudio.m4a\", generateUniqueName).then(function (storageFile) {\n                            capturedFile = storageFile;\n                            mediaCapture.startRecordToStorageFileAsync(m4aEncodingProfile, capturedFile).then(function () {\n                                stopRecordTimeout = setTimeout(stopRecord, audioOptions.duration * 1000);\n                            }, function() {\n                                // if we here, we're totally failed to record either mp3 or m4a\n                                errorCallback(new CaptureError(CaptureError.CAPTURE_INTERNAL_ERR));\n                                return;\n                            });\n                        });\n                    } else {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_INTERNAL_ERR));\n                        return;\n                    }\n                });\n            }, function () { errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES)); });\n        });\n    },\n\n    captureImage:function (successCallback, errorCallback, args) {\n        var CaptureNS = Windows.Media.Capture;\n\n        function fail(code, data) {\n            var err = new CaptureError(code);\n            err.message = data;\n            errorCallback(err);\n        }\n\n        // Check if necessary API available\n        if (!CaptureNS.CameraCaptureUI) {\n            // We are running on WP8.1 which lacks CameraCaptureUI class\n            // so we need to use MediaCapture class instead and implement custom UI for camera\n\n            var proxy = new MediaCaptureProxy();\n\n            proxy.capturePhoto(function (photoFile) {\n                photoFile.getBasicPropertiesAsync().done(function (basicProperties) {\n                    var result = new MediaFile(photoFile.name, 'ms-appdata:///local/' + photoFile.name, photoFile.contentType, basicProperties.dateModified, basicProperties.size);\n                    result.fullPath = photoFile.path;\n                    successCallback([result]);\n                }, function (err) {\n                    fail(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                });\n            }, function (err) {\n                fail(err);\n            });\n\n        } else {\n            var cameraCaptureUI = new Windows.Media.Capture.CameraCaptureUI();\n            cameraCaptureUI.photoSettings.allowCropping = true;\n            cameraCaptureUI.photoSettings.maxResolution = Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution.highestAvailable;\n            cameraCaptureUI.photoSettings.format = Windows.Media.Capture.CameraCaptureUIPhotoFormat.jpeg;\n            cameraCaptureUI.captureFileAsync(Windows.Media.Capture.CameraCaptureUIMode.photo).done(function (file) {\n                if (file) {\n                    file.moveAsync(Windows.Storage.ApplicationData.current.localFolder, \"cameraCaptureImage.jpg\", Windows.Storage.NameCollisionOption.generateUniqueName).then(function () {\n                        file.getBasicPropertiesAsync().then(function (basicProperties) {\n                            var result = new MediaFile(file.name, 'ms-appdata:///local/' + file.name, file.contentType, basicProperties.dateModified, basicProperties.size);\n                            result.fullPath = file.path;\n                            successCallback([result]);\n                        }, function () {\n                            errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                        });\n                    }, function () {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                    });\n                } else {\n                    errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                }\n            }, function () {\n                errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n            });\n        }\n    },\n\n    captureVideo:function (successCallback, errorCallback, args) {\n        var options = args[0];\n        var CaptureNS = Windows.Media.Capture;\n\n        function fail(code, data) {\n            var err = new CaptureError(code);\n            err.message = data;\n            errorCallback(err);\n        }\n\n        // Check if necessary API available\n        if (!CaptureNS.CameraCaptureUI) {\n            // We are running on WP8.1 which lacks CameraCaptureUI class\n            // so we need to use MediaCapture class instead and implement custom UI for camera\n\n            var proxy = new MediaCaptureProxy();\n\n            proxy.captureVideo(function (videoFile) {\n                videoFile.getBasicPropertiesAsync().done(function (basicProperties) {\n                    var result = new MediaFile(videoFile.name, 'ms-appdata:///local/' + videoFile.name, videoFile.contentType, basicProperties.dateModified, basicProperties.size);\n                    result.fullPath = videoFile.path;\n                    successCallback([result]);\n                }, function (err) {\n                    fail(CaptureError.CAPTURE_INTERNAL_ERR, err);\n                });\n            }, fail);\n\n        } else {\n\n            var videoOptions = new CaptureVideoOptions();\n            if (options.duration && options.duration > 0) {\n                videoOptions.duration = options.duration;\n            }\n            if (options.limit > 1) {\n                videoOptions.limit = options.limit;\n            }\n            var cameraCaptureUI = new Windows.Media.Capture.CameraCaptureUI();\n            cameraCaptureUI.videoSettings.allowTrimming = true;\n            cameraCaptureUI.videoSettings.format = Windows.Media.Capture.CameraCaptureUIVideoFormat.mp4;\n            cameraCaptureUI.videoSettings.maxDurationInSeconds = videoOptions.duration;\n            cameraCaptureUI.captureFileAsync(Windows.Media.Capture.CameraCaptureUIMode.video).then(function(file) {\n                if (file) {\n                    file.moveAsync(Windows.Storage.ApplicationData.current.localFolder, \"cameraCaptureVideo.mp4\", Windows.Storage.NameCollisionOption.generateUniqueName).then(function () {\n                        file.getBasicPropertiesAsync().then(function(basicProperties) {\n                            var result = new MediaFile(file.name, 'ms-appdata:///local/' + file.name, file.contentType, basicProperties.dateModified, basicProperties.size);\n                            result.fullPath = file.path;\n                            successCallback([result]);\n                        }, function() {\n                            errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                        });\n                    }, function() {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                    });\n                } else {\n                    errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES));\n                }\n            }, function() { errorCallback(new CaptureError(CaptureError.CAPTURE_NO_MEDIA_FILES)); });\n        }\n    },\n\n    getFormatData: function (successCallback, errorCallback, args) {\n        Windows.Storage.StorageFile.getFileFromPathAsync(args[0]).then(\n            function (storageFile) {\n                var mediaTypeFlag = String(storageFile.contentType).split(\"/\")[0].toLowerCase();\n                if (mediaTypeFlag === \"audio\") {\n                    storageFile.properties.getMusicPropertiesAsync().then(function (audioProperties) {\n                        successCallback(new MediaFileData(null, audioProperties.bitrate, 0, 0, audioProperties.duration / 1000));\n                    }, function () {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                    });\n                }\n                else if (mediaTypeFlag === \"video\") {\n                    storageFile.properties.getVideoPropertiesAsync().then(function (videoProperties) {\n                        successCallback(new MediaFileData(null, videoProperties.bitrate, videoProperties.height, videoProperties.width, videoProperties.duration / 1000));\n                    }, function () {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                    });\n                }\n                else if (mediaTypeFlag === \"image\") {\n                    storageFile.properties.getImagePropertiesAsync().then(function (imageProperties) {\n                        successCallback(new MediaFileData(null, 0, imageProperties.height, imageProperties.width, 0));\n                    }, function () {\n                        errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                    });\n                }\n                else { errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT)); }\n            }, function () {\n                errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n            }\n        );\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Capture\",module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/src/windows/MediaFile.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/*global Windows:true */\n\nvar MediaFileData = require('cordova-plugin-media-capture.MediaFileData');\nvar CaptureError = require('cordova-plugin-media-capture.CaptureError');\n\nmodule.exports = {\n\n    getFormatData: function (successCallback, errorCallback, args) {\n        Windows.Storage.StorageFile.getFileFromPathAsync(this.fullPath).then(\n            function (storageFile) {\n                var mediaTypeFlag = String(storageFile.contentType).split(\"/\")[0].toLowerCase();\n                if (mediaTypeFlag === \"audio\") {\n                    storageFile.properties.getMusicPropertiesAsync().then(\n                        function (audioProperties) {\n                            successCallback(new MediaFileData(null, audioProperties.bitrate, 0, 0, audioProperties.duration / 1000));\n                        }, function () {\n                            errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                        }\n                    );\n                } else if (mediaTypeFlag === \"video\") {\n                    storageFile.properties.getVideoPropertiesAsync().then(\n                        function (videoProperties) {\n                            successCallback(new MediaFileData(null, videoProperties.bitrate, videoProperties.height, videoProperties.width, videoProperties.duration / 1000));\n                        }, function () {\n                            errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                        }\n                    );\n                } else if (mediaTypeFlag === \"image\") {\n                    storageFile.properties.getImagePropertiesAsync().then(\n                        function (imageProperties) {\n                            successCallback(new MediaFileData(null, 0, imageProperties.height, imageProperties.width, 0));\n                        }, function () {\n                            errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                        }\n                    );\n                } else {\n                    errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n                }\n            }, function () {\n                errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));\n            }\n        );\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media-capture/node_modules/cordova-plugin-media-capture/www/android/init.js":"/*\r\n *\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n *\r\n*/\r\n\r\nvar cordova = require('cordova'),\r\n    helpers = require('./helpers');\r\n\r\nvar SUCCESS_EVENT = \"pendingcaptureresult\";\r\nvar FAILURE_EVENT = \"pendingcaptureerror\";\r\n\r\nvar sChannel = cordova.addStickyDocumentEventHandler(SUCCESS_EVENT);\r\nvar fChannel = cordova.addStickyDocumentEventHandler(FAILURE_EVENT);\r\n\r\n// We fire one of two events in the case where the activity gets killed while\r\n// the user is capturing audio, image, video, etc. in a separate activity\r\ndocument.addEventListener(\"deviceready\", function() {\r\n    document.addEventListener(\"resume\", function(event) {\r\n        if (event.pendingResult && event.pendingResult.pluginServiceName === \"Capture\") {\r\n            if (event.pendingResult.pluginStatus === \"OK\") {\r\n                var mediaFiles = helpers.wrapMediaFiles(event.pendingResult.result);\r\n                sChannel.fire(mediaFiles);\r\n            } else {\r\n                fChannel.fire(event.pendingResult.result);\r\n            }\r\n        }\r\n    });\r\n});\r\n"}